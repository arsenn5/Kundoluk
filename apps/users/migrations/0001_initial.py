# Generated by Django 4.2.3 on 2023-09-11 11:29

import apps.users.manager
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('surname', models.CharField(max_length=100, null=True, unique=True, verbose_name='ФИО')),
                ('email', models.EmailField(max_length=100, null=True, unique=True, verbose_name='Почта')),
                ('password', models.CharField(max_length=100, unique=True, verbose_name='Пароль')),
                ('training_class', models.CharField(choices=[('11-E2', '11-E2'), ('11-B', '11-B')], max_length=100, null=True, verbose_name='Класс')),
                ('role', models.CharField(choices=[('староста', 'староста'), ('ученик', 'ученик')], max_length=100, null=True, verbose_name='Роль')),
                ('code', models.CharField(max_length=6)),
                ('is_active', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=False)),
                ('is_elder', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', apps.users.manager.UserManager()),
            ],
        ),
    ]
